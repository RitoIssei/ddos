// runner.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';

// ---- X√°c ƒë·ªãnh __dirname ----
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ---- C·∫•u h√¨nh ----
const scriptsDir = path.join(__dirname, 'scripts');
const fileName = process.argv[2] || 'http.js';
const frequency = parseFloat(process.argv[3]) || 30;
const filePath = path.join(scriptsDir, fileName);

if (!fs.existsSync(filePath)) {
  console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file ${fileName}`);
  process.exit(1);
}

console.log(`üöÄ Ch·∫°y ${fileName} v·ªõi t·∫ßn su·∫•t ${frequency} l·∫ßn/gi√¢y`);

// ---- Thi·∫øt l·∫≠p require v√† ƒë∆∞·ªùng d·∫´n cache ----
const requireCJS = createRequire(import.meta.url);
const resolvedPath = requireCJS.resolve(filePath);

// ---- H√†m ch·∫°y script ----
async function runScript() {
  try {
    // X√≥a cache ƒë·ªÉ l·∫ßn sau require s·∫Ω load l·∫°i file
    delete requireCJS.cache[resolvedPath];

    // Load module (module ph·∫£i export 1 function ho·∫∑c default function)
    const mod = requireCJS(filePath);
    const fn = (typeof mod === 'function') ? mod : mod.default;
    if (typeof fn === 'function') {
      await fn();
    } else {
      console.warn('‚ö†Ô∏è Module kh√¥ng export function');
    }

    // N·∫øu b·∫°n ch·∫°y v·ªõi `node --expose-gc runner.js` th√¨ c√≥ th·ªÉ g·ªçi GC th·ªß c√¥ng:
    if (global.gc) global.gc();

  } catch (err) {
    console.error(`‚ùå L·ªói khi ch·∫°y ${fileName}:`, err);
  }
}

// ---- L√™n l·ªãch ----
const intervalMs = 1000 / frequency;
setInterval(runScript, intervalMs);
